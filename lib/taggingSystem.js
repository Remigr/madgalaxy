var natural = require('natural');
/**
 * Is given a title and description and tries to determing tags
 * @param  {string}   articleTitle       
 * @param  {string}   articleDescription 
 * @param  {Function} callback           err, results
 */
function tagArticle(articleTitle, articleDescription, callback){
  var TfIdf = natural.TfIdf;
  var tfidf = new TfIdf();
  var tags = [];
  //var preDeterminedTags = ['node', 'NodeJS', 'Node', 'npm', 'NPM', 'AngularJS', 'angularjs', 'BackboneJS', 'Backbone', 'backbone', 'Ember.js', 'Ember', 'JQuery', 'Ruby' 'Rails', 'PHP', 'Laravel', 'git', '.git' , 'GIT', 'Git', 'CSS', 'css', 'CSS3', 'css3'];
  //not necessarily a horrible thing, but make sure you have atleast two documents. If there is only one, it will cause problems (due to a bug - its already filed)
  tfidf.addDocument(articleDescription);
  tfidf.addDocument(articleTitle);

  if (tfidf.tfidf('node', 0) >= .69 || tfidf.tfidf('NodeJS', 0) >= .69 || tfidf.tfidf('Node', 0) >= .69 || tfidf.tfidf('NodeConf', 0) >= .69){
    tags.push('node');
    //console.log('added a tag: node');
  }
  if (tfidf.tfidf('npm', 0) >= .69 || tfidf.tfidf('NPM', 0) >= .69){
    tags.push('npm');
    //console.log('added a tag: npm');
  }
  if (tfidf.tfidf('AngularJS', 0) >= .69 ){
    tags.push('AngularJS');
    //console.log('added a tag: AngularJS');
  }
  if (tfidf.tfidf('BackboneJS', 0) >= .69 || tfidf.tfidf('Backbone', 0) >= .69 || tfidf.tfidf('backbone', 0) >= .69 ) {
    tags.push('BackboneJS');
    //console.log('added a tag: BackboneJS');
  }
  if (tfidf.tfidf('Ember.js', 0) >= .69 || tfidf.tfidf('Ember', 0) >= .69){
    tags.push('EmberJS');
    //console.log('added a tag: Ember.js');
  }
  if (tfidf.tfidf('JQuery', 0) >= .69 || tfidf.tfidf('jQuery', 0) >= .69){
    tags.push('JQuery');
    //console.log('added a tag: JQuery');
  }
  if (tfidf.tfidf('Ruby', 0) >= .69 ){
    tags.push('Ruby');
    //console.log('added a tag: Ruby');
  }
  if (tfidf.tfidf('Rails', 0) >= .69 ){
    tags.push('Rails');
    //console.log('added a tag: Rails');
  }
  if (tfidf.tfidf('PHP', 0) >= .69 ){
    tags.push('PHP');
    //console.log('added a tag: PHP');
  }
  if (tfidf.tfidf('Laravel', 0) >= .69 ){
    tags.push('Laravel');
    //console.log('added a tag: Laravel');
  }
  if (tfidf.tfidf('git', 0) >= .69 || tfidf.tfidf('.git', 0) >= .69 || tfidf.tfidf('Git', 0) >= .69 || tfidf.tfidf('GIT', 0) >= .69){
    tags.push('git');
    //console.log('added a tag: git');
  }
  if (tfidf.tfidf('CSS', 0) >= .69 ){
    tags.push('CSS');
    //console.log('added a tag: CSS');
  }
  if (tfidf.tfidf('JavaScript', 0) >= .69 || tfidf.tfidf('javascript', 0) >= .69 || tfidf.tfidf('.js', 0) >= .69 ){
    tags.push('JavaScript');
    //console.log('added a tag: CSS');
  }
  if (tfidf.tfidf('HTML', 0) >= .69 || tfidf.tfidf('HTML5', 0) >= .69 || tfidf.tfidf('html', 0) >= .69){
    tags.push('HTML');
    //console.log('added a tag: CSS');
  }

  /**
   * If no pre-determined tags were found from the description, try auto-generating some from the title
   */
  if(tags.length != 0){
    //console.log((tags + '').yellow);
  }
  else{
    var titleTags = [];    
    var tagsForArticle = (tfidf.listTerms(1)); //this is referencing the title - notice the 1 instead of 0
    //put autogenerated tags in 
    for (var item in tagsForArticle){
      titleTags.push(tagsForArticle[item].term);
    }
    for (var tag in titleTags){
      if (titleTags[tag] == 'node' || titleTags[tag] == 'NodeConf'){
        tags.push('node');
      }
      if (titleTags[tag] == 'backbone'){
        tags.push('BackboneJS');
      }
      if (titleTags[tag] == 'angularjs' || titleTags[tag] == 'angular'){
        tags.push('AngularJS');
      }
      if (titleTags[tag] == 'ruby'){
        tags.push('Ruby');
      }
      if (titleTags[tag] == 'rails'){
        tags.push('Rails');
      }
      if (titleTags[tag] == 'jquery'){
        tags.push('JQuery');
      }
      if (titleTags[tag] == 'css'){
        tags.push('CSS');
      }
      if (titleTags[tag] == 'npm'){
        tags.push('npm');
      }
      if (titleTags[tag] == 'ember'){
        tags.push('Ember.js');
      }
    }
    if (tags.length !=0){
      //console.log(('Couldnt find pre-defined tags for: ' + articleTitle).yellow + '. Instead, I will add: ' + tags);
    }
    else{
      //console.log(('Still could not generate tags for: ' + articleTitle).blue);
    }
  }
  //used null just to follow convention, but eventually add in err trace
  callback(null, tags);
}

exports.tagArticle = tagArticle;